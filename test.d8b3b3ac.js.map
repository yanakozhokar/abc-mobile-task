{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,eAC9BC,EAAWF,SAASC,cAAc,yBAClCE,EAAcH,SAASC,cAAc,oBACrCG,EAAeJ,SAASC,cAAc,qBAM5C,SAASI,IACPN,EAAKO,UAAUC,OAAO,aAErBR,EAAKO,UAAUE,SAAS,aAEpBR,SAASC,cAAc,QAAQQ,MAAMC,SAAW,UADhDV,SAASC,cAAc,QAAQQ,MAAMC,SAAW,Q,CARvDP,EAAYQ,iBAAiB,QAASN,GACtCD,EAAaO,iBAAiB,QAASN,GACvCH,EAASS,iBAAiB,SAU1B,SAAyBC,GACO,MAA1BA,EAAMC,OAAOC,UACfT,G,ICnBJ,MAAMU,EAAiBf,SAASC,cAAc,SACxCe,EAAchB,SAASC,cAAc,eACrCgB,EAAejB,SAASC,cAAc,eAAeiB,SACrDC,EAAanB,SAASC,cAAc,aACpCmB,EAAwBpB,SAASC,cAAc,oBAC/CoB,EAAuBrB,SAASC,cAAc,yBAC9CqB,EAAoBtB,SAASC,cAAc,YAC3CsB,EAAavB,SAASC,cAAc,YACpCuB,EAAU,GAEVC,EACJL,EAAsBM,YACtBN,EAAsBM,YAAcT,EAAaU,OAEnDN,EAAqBZ,MAAMmB,MAAQ,GAAGC,KAAKC,MACzCL,EAAeR,EAAaU,YAG9BX,EAAYL,iBAAiB,UAAU,KACjBK,EAAYf,cAAc,wBACb8B,iBAC/B,+BAEeJ,OAAS,GACxBR,EAAWa,gBAAgB,WAAW,IAI1Cb,EAAWR,iBAAiB,SAAS,KACnC,MAAMsB,EAAcjB,EAAYf,cAAc,wBACxCiC,EAAeC,MAAMC,KAAKnB,GAAcoB,QAAQJ,GACtDA,EAAY3B,UAAUgC,OAAO,uBAC7BL,EAAY3B,UAAUiC,IAAI,sBAC1B,MAAMC,EAAWvB,EAAaiB,EAAe,GAM7C,GAJAb,EAAqBZ,MAAMmB,MAAQ,GAAGC,KAAKC,OACvCI,EAAe,GAAKT,EAAgBR,EAAaU,YAGjDa,EACFA,EAASlC,UAAUgC,OAAO,sBAC1BE,EAASlC,UAAUiC,IAAI,uBACvBpB,EAAWsB,aAAa,WAAY,gBAC/B,CACL1B,EAAeT,UAAUiC,IAAI,aAC7BhB,EAAWjB,UAAUgC,OAAO,aAE5BI,YAAW,KACTnB,EAAWjB,UAAUiC,IAAI,aACzBjB,EAAkBhB,UAAUgC,OAAO,YAAY,GAC9C,KAEmBtC,SAAS+B,iBAC7B,+BAEYY,SAAQC,IACpB,MAAMC,KAAEA,EAAIC,MAAEA,GAAUF,EACxBpB,EAAQuB,KAAK,CAAEF,CAACA,GAAOC,GAAQ,G,KCzDrC,MAAME,EAAahD,SAASC,cAAc,sBACpCgD,EAAkBjD,SAASC,cAAc,mBAE/C+C,EAAWrC,iBAAiB,SAE5B,WAKEuC,MAAM,mCACHC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACJ,MAAMT,KACJA,EAAIU,OACJA,EAAMC,KACNA,EAAIC,WACJA,EAAUC,WACVA,EAAUC,UACVA,EAASC,WACTA,EAAUC,OACVA,EAAMC,UACNA,EAASC,MACTA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,UACRA,EAASC,QACTA,EAAOC,OACPA,GACEd,EAEEe,EAAW,IACZL,EAAQM,KAAIC,GAAUrB,MAAMqB,QAC5BR,EAAMO,KAAIE,GAAQtB,MAAMsB,QACxBN,EAAUI,KAAIG,GAAYvB,MAAMuB,QAChCR,EAASK,KAAII,GAAWxB,MAAMwB,KACjCxB,MAAMY,IAGRa,QAAQC,IAAIP,GACTlB,MAAK0B,GAAaF,QAAQC,IAAIC,EAAUP,KAAIQ,GAAOA,EAAIzB,YACvDF,MAAK4B,IACJ,MAAMC,EAAiBD,EAAQE,MAAM,EAAGjB,EAAQrC,QAC1CuD,EAAeH,EAAQE,MAC3BjB,EAAQrC,OACRqC,EAAQrC,OAASoC,EAAMpC,QAEnBwD,EAAoBJ,EAAQE,MAChCjB,EAAQrC,OAASoC,EAAMpC,OACvBqC,EAAQrC,OAASoC,EAAMpC,OAASuC,EAAUvC,QAEtCyD,EAAkBL,EAAQE,MAC9BjB,EAAQrC,OAASoC,EAAMpC,OAASuC,EAAUvC,OAC1CqC,EAAQrC,OAASoC,EAAMpC,OAASuC,EAAUvC,OAASsC,EAAStC,QAExD0D,EAAmBN,EAAQE,MAAMF,EAAQpD,OAAS,IA2BlE,SAAmB2B,GACjB,MAAMT,KACJA,EAAIU,OACJA,EAAMC,KACNA,EAAIC,WACJA,EAAUC,WACVA,EAAUC,UACVA,EAASC,WACTA,EAAUC,OACVA,EACAC,UAAAwB,EAASvB,MACTA,EAAKC,QACLA,EAAOC,SACPA,EAAQC,UACRA,EAASC,QACTA,EAAOC,OACPA,GACEd,EAEEiC,EAAS,4IAEqC1C,+HAGEU,6HAGFC,mIAGMC,mIAGAC,kIAGDC,mIAGCC,+HAGJC,kIAGGyB,EAC9ChB,KAAIR,GAAaA,EAAUjB,OAC3B2C,KAAK,kIAGqCzB,EAC1CO,KAAIE,GAAQA,EAAKiB,QACjBD,KAAK,oIAGuCxB,EAC5CM,KAAIC,GAAUA,EAAO1B,OACrB2C,KAAK,qIAGwCvB,EAC7CK,KAAII,GAAWA,EAAQ7B,OACvB2C,KAAK,sIAGyCtB,EAC9CI,KAAIG,GAAYA,EAAS5B,OACzB2C,KAAK,oIAGuCrB,+HAGDC,gCAItDpB,EAAW0C,mBAAmB,WAAYH,E,CApFlCI,CAlBiB,C,KACf9C,E,OACAU,E,KACAC,E,WACAC,E,WACAC,E,UACAC,E,WACAC,E,OACAC,EACAC,UAAWuB,EACXtB,MAAOmB,EACPlB,QAASgB,EACTf,SAAUmB,EACVlB,UAAWiB,E,QACXhB,E,OACAC,GAGiB,IAEpBwB,OAAMC,GAASC,QAAQC,IAAIF,IAAO,IAEtCD,OAAMC,GAASC,QAAQC,IAAIF,I,KAyIlB,IAtDd,MAKEG,OAAMC,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IACtB,MAAMC,EAAcC,KAAKC,MACnBC,EAAU,KAAAN,EAAsB,IAAAC,EAAgC,IAAVC,EAE5DK,KAAKC,WAAaC,aAAY,KAC5B,MACMC,EADcN,KAAKC,MACQF,EAC3BQ,EAAWJ,KAAKK,YAAYN,EAAUI,GAC5CH,KAAKM,UAAUF,GAEM,IAAnBA,EAASX,OACY,IAArBW,EAASV,SACY,IAArBU,EAAST,SAETY,cAAcP,KAAKC,W,GAGpB,I,CAGLO,OACED,cAAcP,KAAKC,W,CAGrBI,YAAYI,GACV,MAAMhB,EAAQpE,KAAKqF,MAAMD,EAAe,IAAO,MACzCf,EAAUrE,KAAKqF,OAClBD,EAAe,KAAAhB,GAAuB,IAAO,IAKhD,MAAO,C,MAAEA,E,QAAOC,E,QAHArE,KAAKqF,OAClBD,EAAe,KAAAhB,EAAsB,IAAAC,GAAuB,K,CAKjEY,WAAUb,MAAEA,EAAKC,QAAEA,EAAOC,QAAEA,IACtBF,EAAQ,KACVA,EAAQ,IAAIA,KAEVC,EAAU,KACZA,EAAU,IAAIA,KAEZC,EAAU,KACZA,EAAU,IAAIA,KAEhBlD,EAAgBkE,YAAc,GAAGjB,KAAWC,G,CAjD9CiB,cACEZ,KAAKC,WAAa,I,IAsDhBT,MAAM,CAAEC,MAAO,EAAGC,QAAS,GAAIC,QAAS","sources":["src/js/header-menu.js","src/js/test-quiz.js","src/js/test-results.js"],"sourcesContent":["const menu = document.querySelector('[data-menu]');\nconst menuList = document.querySelector('.modal__nav-menu-list');\nconst openMenuBtn = document.querySelector('[data-menu-open]');\nconst closeMenuBtn = document.querySelector('[data-menu-close]');\n\nopenMenuBtn.addEventListener('click', toggleMenu);\ncloseMenuBtn.addEventListener('click', toggleMenu);\nmenuList.addEventListener('click', onMenuListClick);\n\nfunction toggleMenu() {\n  menu.classList.toggle('is-hidden');\n\n  !menu.classList.contains('is-hidden')\n    ? (document.querySelector('body').style.overflow = 'hidden')\n    : (document.querySelector('body').style.overflow = 'visible');\n}\n\nfunction onMenuListClick(event) {\n  if (event.target.nodeName === 'A') {\n    toggleMenu();\n  }\n}\n","const quizSectionRef = document.querySelector('.quiz');\nconst quizFormRef = document.querySelector('.quiz__form');\nconst quizItemsRef = document.querySelector('.quiz__list').children;\nconst quizBtnRef = document.querySelector('.btn-form');\nconst quizIndicatorEmptyRef = document.querySelector('.quiz__indicator');\nconst quizIndicatorFillRef = document.querySelector('.quiz__indicator-fill');\nconst resultsSectionRef = document.querySelector('.results');\nconst loadingRef = document.querySelector('.loading');\nconst answers = [];\n\nconst maxFillWidth =\n  quizIndicatorEmptyRef.clientWidth -\n  quizIndicatorEmptyRef.clientWidth / quizItemsRef.length;\n\nquizIndicatorFillRef.style.width = `${Math.round(\n  maxFillWidth / quizItemsRef.length\n)}px`;\n\nquizFormRef.addEventListener('change', () => {\n  const currentItem = quizFormRef.querySelector('.quiz__item--visible');\n  const checkedInput = currentItem.querySelectorAll(\n    'input[type=\"radio\"]:checked'\n  );\n  if (checkedInput.length > 0) {\n    quizBtnRef.removeAttribute('disabled');\n  }\n});\n\nquizBtnRef.addEventListener('click', () => {\n  const currentItem = quizFormRef.querySelector('.quiz__item--visible');\n  const currentIndex = Array.from(quizItemsRef).indexOf(currentItem);\n  currentItem.classList.remove('quiz__item--visible');\n  currentItem.classList.add('quiz__item--hidden');\n  const nextItem = quizItemsRef[currentIndex + 1];\n\n  quizIndicatorFillRef.style.width = `${Math.round(\n    ((currentIndex + 2) * maxFillWidth) / quizItemsRef.length\n  )}px`;\n\n  if (nextItem) {\n    nextItem.classList.remove('quiz__item--hidden');\n    nextItem.classList.add('quiz__item--visible');\n    quizBtnRef.setAttribute('disabled', 'disabled');\n  } else {\n    quizSectionRef.classList.add('is-hidden');\n    loadingRef.classList.remove('is-hidden');\n\n    setTimeout(() => {\n      loadingRef.classList.add('is-hidden');\n      resultsSectionRef.classList.remove('is-hidden');\n    }, 3000);\n\n    const checkedInputs = document.querySelectorAll(\n      'input[type=\"radio\"]:checked'\n    );\n    checkedInputs.forEach(el => {\n      const { name, value } = el;\n      answers.push({ [name]: value });\n    });\n  }\n});\n","const callBtnRef = document.querySelector('.results__call-btn');\nconst resultsTimerRef = document.querySelector('.results__timer');\n\ncallBtnRef.addEventListener('click', onCallBtnClick);\n\nfunction onCallBtnClick() {\n  fetchRequest();\n}\n\nfunction fetchRequest() {\n  fetch('https://swapi.dev/api/people/1/')\n    .then(response => response.json())\n    .then(data => {\n      const {\n        name,\n        height,\n        mass,\n        hair_color,\n        skin_color,\n        eye_color,\n        birth_year,\n        gender,\n        homeworld,\n        films,\n        species,\n        vehicles,\n        starships,\n        created,\n        edited,\n      } = data;\n\n      const promises = [\n        ...species.map(speccy => fetch(speccy)),\n        ...films.map(film => fetch(film)),\n        ...starships.map(starship => fetch(starship)),\n        ...vehicles.map(vehicle => fetch(vehicle)),\n        fetch(homeworld),\n      ];\n\n      Promise.all(promises)\n        .then(responses => Promise.all(responses.map(res => res.json())))\n        .then(results => {\n          const speciesFetched = results.slice(0, species.length);\n          const filmsFetched = results.slice(\n            species.length,\n            species.length + films.length\n          );\n          const starshipsFethched = results.slice(\n            species.length + films.length,\n            species.length + films.length + starships.length\n          );\n          const vehiclesFetched = results.slice(\n            species.length + films.length + starships.length,\n            species.length + films.length + starships.length + vehicles.length\n          );\n          const homeworldFetched = results.slice(results.length - 1);\n\n          const toRender = {\n            name,\n            height,\n            mass,\n            hair_color,\n            skin_color,\n            eye_color,\n            birth_year,\n            gender,\n            homeworld: homeworldFetched,\n            films: filmsFetched,\n            species: speciesFetched,\n            vehicles: vehiclesFetched,\n            starships: starshipsFethched,\n            created,\n            edited,\n          };\n\n          addMarkup(toRender);\n        })\n        .catch(error => console.log(error));\n    })\n    .catch(error => console.log(error));\n}\n\nfunction addMarkup(data) {\n  const {\n    name,\n    height,\n    mass,\n    hair_color,\n    skin_color,\n    eye_color,\n    birth_year,\n    gender,\n    homeworld,\n    films,\n    species,\n    vehicles,\n    starships,\n    created,\n    edited,\n  } = data;\n\n  const markup = `<div class=\"results__request\">\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Name: </span>${name}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Height: </span>${height}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Mass: </span>${mass}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Hair color: </span>${hair_color}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Skin color: </span>${skin_color}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Eye color: </span>${eye_color}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Birth year: </span>${birth_year}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Gender: </span>${gender}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Homeworld: </span>${homeworld\n            .map(homeworld => homeworld.name)\n            .join(', ')}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Films: </span>${films\n            .map(film => film.title)\n            .join(', ')}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Species: </span>${species\n            .map(speccy => speccy.name)\n            .join(', ')}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Vehicles: </span>${vehicles\n            .map(vehicle => vehicle.name)\n            .join(', ')}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Starships: </span>${starships\n            .map(starship => starship.name)\n            .join(', ')}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Created: </span>${created}\n        </p>\n        <p class=\"results__request-characteristic\">\n          <span class=\"bold-lowercase\">Edited: </span>${edited}\n        </p>\n      </div>`;\n\n  callBtnRef.insertAdjacentHTML('afterend', markup);\n}\n\nclass Timer {\n  constructor() {\n    this.intervalID = null;\n  }\n\n  start({ hours, minutes, seconds }) {\n    const initialTime = Date.now();\n    const setTime = hours * 3600 * 1000 + minutes * 60 * 1000 + seconds * 1000;\n\n    this.intervalID = setInterval(() => {\n      const currentTime = Date.now();\n      const difference = currentTime - initialTime;\n      const restTime = this.convertTime(setTime - difference);\n      this.showTimer(restTime);\n      if (\n        restTime.hours === 0 &&\n        restTime.minutes === 0 &&\n        restTime.seconds === 0\n      ) {\n        clearInterval(this.intervalID);\n        return;\n      }\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalID);\n  }\n\n  convertTime(milliseconds) {\n    const hours = Math.floor(milliseconds / 1000 / 3600);\n    const minutes = Math.floor(\n      (milliseconds - hours * 3600 * 1000) / 1000 / 60\n    );\n    const seconds = Math.floor(\n      (milliseconds - hours * 1000 * 3600 - minutes * 60 * 1000) / 1000\n    );\n    return { hours, minutes, seconds };\n  }\n\n  showTimer({ hours, minutes, seconds }) {\n    if (hours < 10) {\n      hours = `0${hours}`;\n    }\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n    resultsTimerRef.textContent = `${minutes}:${seconds}`;\n  }\n}\n\nconst timer = new Timer();\n\ntimer.start({ hours: 0, minutes: 10, seconds: 0 });\n"],"names":["$c628cd15aa7989e3$var$menu","document","querySelector","$c628cd15aa7989e3$var$menuList","$c628cd15aa7989e3$var$openMenuBtn","$c628cd15aa7989e3$var$closeMenuBtn","$c628cd15aa7989e3$var$toggleMenu","classList","toggle","contains","style","overflow","addEventListener","event","target","nodeName","$3916bbc268113bd1$var$quizSectionRef","$3916bbc268113bd1$var$quizFormRef","$3916bbc268113bd1$var$quizItemsRef","children","$3916bbc268113bd1$var$quizBtnRef","$3916bbc268113bd1$var$quizIndicatorEmptyRef","$3916bbc268113bd1$var$quizIndicatorFillRef","$3916bbc268113bd1$var$resultsSectionRef","$3916bbc268113bd1$var$loadingRef","$3916bbc268113bd1$var$answers","$3916bbc268113bd1$var$maxFillWidth","clientWidth","length","width","Math","round","querySelectorAll","removeAttribute","currentItem","currentIndex","Array","from","indexOf","remove","add","nextItem","setAttribute","setTimeout","forEach","el","name","value","push","$fb4c468c02520e8f$var$callBtnRef","$fb4c468c02520e8f$var$resultsTimerRef","fetch","then","response","json","data","height","mass","hair_color","skin_color","eye_color","birth_year","gender","homeworld","films","species","vehicles","starships","created","edited","promises","map","speccy","film","starship","vehicle","Promise","all","responses","res","results","speciesFetched","slice","filmsFetched","starshipsFethched","vehiclesFetched","homeworldFetched","homeworld1","markup","join","title","insertAdjacentHTML","$fb4c468c02520e8f$var$addMarkup","catch","error","console","log","start","hours","minutes","seconds","initialTime","Date","now","setTime","this","intervalID","setInterval","difference","restTime","convertTime","showTimer","clearInterval","stop","milliseconds","floor","textContent","constructor"],"version":3,"file":"test.d8b3b3ac.js.map"}