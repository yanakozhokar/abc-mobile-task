const e=document.querySelector("[data-menu]"),s=document.querySelector(".modal__nav-menu-list"),t=document.querySelector("[data-menu-open]"),n=document.querySelector("[data-menu-close]");function c(){e.classList.toggle("is-hidden"),e.classList.contains("is-hidden")?document.querySelector("body").style.overflow="visible":document.querySelector("body").style.overflow="hidden"}t.addEventListener("click",c),n.addEventListener("click",c),s.addEventListener("click",(function(e){"A"===e.target.nodeName&&c()}));const l=document.querySelector(".quiz"),r=document.querySelector(".quiz__form"),a=document.querySelector(".quiz__list").children,i=document.querySelector(".btn-form"),o=document.querySelector(".quiz__indicator"),d=document.querySelector(".quiz__indicator-fill"),u=document.querySelector(".results"),h=document.querySelector(".loading"),p=[],m=o.clientWidth-o.clientWidth/a.length;d.style.width=`${Math.round(m/a.length)}px`,r.addEventListener("change",(()=>{r.querySelector(".quiz__item--visible").querySelectorAll('input[type="radio"]:checked').length>0&&i.removeAttribute("disabled")})),i.addEventListener("click",(()=>{const e=r.querySelector(".quiz__item--visible"),s=Array.from(a).indexOf(e);e.classList.remove("quiz__item--visible"),e.classList.add("quiz__item--hidden");const t=a[s+1];if(d.style.width=`${Math.round((s+2)*m/a.length)}px`,t)t.classList.remove("quiz__item--hidden"),t.classList.add("quiz__item--visible"),i.setAttribute("disabled","disabled");else{l.classList.add("is-hidden"),h.classList.remove("is-hidden"),setTimeout((()=>{h.classList.add("is-hidden"),u.classList.remove("is-hidden")}),3e3);document.querySelectorAll('input[type="radio"]:checked').forEach((e=>{const{name:s,value:t}=e;p.push({[s]:t})}))}}));const _=document.querySelector(".results__call-btn"),q=document.querySelector(".results__timer");_.addEventListener("click",(function(){fetch("https://swapi.dev/api/people/1/").then((e=>e.json())).then((e=>{const{name:s,height:t,mass:n,hair_color:c,skin_color:l,eye_color:r,birth_year:a,gender:i,homeworld:o,films:d,species:u,vehicles:h,starships:p,created:m,edited:q}=e,y=[...u.map((e=>fetch(e))),...d.map((e=>fetch(e))),...p.map((e=>fetch(e))),...h.map((e=>fetch(e))),fetch(o)];Promise.all(y).then((e=>Promise.all(e.map((e=>e.json()))))).then((e=>{const o=e.slice(0,u.length),y=e.slice(u.length,u.length+d.length),g=e.slice(u.length+d.length,u.length+d.length+p.length),v=e.slice(u.length+d.length+p.length,u.length+d.length+p.length+h.length),b=e.slice(e.length-1);!function(e){const{name:s,height:t,mass:n,hair_color:c,skin_color:l,eye_color:r,birth_year:a,gender:i,homeworld:o,films:d,species:u,vehicles:h,starships:p,created:m,edited:q}=e,y=`<div class="results__request">\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Name: </span>${s}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Height: </span>${t}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Mass: </span>${n}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Hair color: </span>${c}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Skin color: </span>${l}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Eye color: </span>${r}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Birth year: </span>${a}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Gender: </span>${i}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Homeworld: </span>${o.map((e=>e.name)).join(", ")}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Films: </span>${d.map((e=>e.title)).join(", ")}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Species: </span>${u.map((e=>e.name)).join(", ")}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Vehicles: </span>${h.map((e=>e.name)).join(", ")}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Starships: </span>${p.map((e=>e.name)).join(", ")}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Created: </span>${m}\n        </p>\n        <p class="results__request-characteristic">\n          <span class="bold-lowercase">Edited: </span>${q}\n        </p>\n      </div>`;_.insertAdjacentHTML("afterend",y)}({name:s,height:t,mass:n,hair_color:c,skin_color:l,eye_color:r,birth_year:a,gender:i,homeworld:b,films:y,species:o,vehicles:v,starships:g,created:m,edited:q})})).catch((e=>console.log(e)))})).catch((e=>console.log(e)))}));(new class{start({hours:e,minutes:s,seconds:t}){const n=Date.now(),c=36e5*e+6e4*s+1e3*t;this.intervalID=setInterval((()=>{const e=Date.now()-n,s=this.convertTime(c-e);this.showTimer(s),0!==s.hours||0!==s.minutes||0!==s.seconds||clearInterval(this.intervalID)}),1e3)}stop(){clearInterval(this.intervalID)}convertTime(e){const s=Math.floor(e/1e3/3600),t=Math.floor((e-36e5*s)/1e3/60);return{hours:s,minutes:t,seconds:Math.floor((e-36e5*s-6e4*t)/1e3)}}showTimer({hours:e,minutes:s,seconds:t}){e<10&&(e=`0${e}`),s<10&&(s=`0${s}`),t<10&&(t=`0${t}`),q.textContent=`${s}:${t}`}constructor(){this.intervalID=null}}).start({hours:0,minutes:10,seconds:0});
//# sourceMappingURL=test.d8b3b3ac.js.map
